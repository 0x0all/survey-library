/// <reference path="../../sources/base.ts" />
/// <reference path="../../sources/question.ts" />
/// <reference path="../../sources/question_baseselect.ts" />
/// <reference path="../../sources/question_checkbox.ts" />
var dxSurvey;
(function (dxSurvey) {
    var koTests;
    (function (koTests) {
        QUnit.module("koTests");
        QUnit.test("Super stable test", function (assert) {
            assert.equal(1 + 1, 2, "This should usually pass");
        });
        QUnit.test("Set value through observable value", function (assert) {
            var question = new dxSurvey.Question("q");
            question.koValue("test");
            assert.equal(question.value, "test", "value is set correctly.");
        });
        QUnit.test("koOtherVisible for one choice items", function (assert) {
            var question = new dxSurvey.QuestionSelectBase("q");
            assert.equal(question.koOtherVisible(), false, "Initially is not visible");
            question.koValue(question.otherString);
            assert.equal(question.koOtherVisible(), true, "Other visible is true after selecting it");
        });
        QUnit.test("Create koValue as observable array for checkbox", function (assert) {
            var question = new dxSurvey.QuestionCheckbox("q");
            question.koValue.push("test1");
            question.koValue.push("test2");
            assert.deepEqual(question.koValue(), ["test1", "test2"], "koValue is observable array");
            assert.deepEqual(question.value, ["test1", "test2"], "value is set correctly.");
        });
        QUnit.test("koOtherVisible for multi choice items", function (assert) {
            var question = new dxSurvey.QuestionCheckbox("q");
            assert.equal(question.koOtherVisible(), false, "Initially is not visible");
            question.koValue.push("test1");
            question.koValue.push(question.otherString);
            assert.equal(question.koOtherVisible(), true, "Other visible is true after selecting it");
            question.koValue.pop();
            assert.equal(question.koOtherVisible(), false, "Other visible is true after selecting it");
        });
    })(koTests = dxSurvey.koTests || (dxSurvey.koTests = {}));
})(dxSurvey || (dxSurvey = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImR4c3VydmV5X2tvdGVzdHMudHMiXSwibmFtZXMiOlsiZHhTdXJ2ZXkiLCJkeFN1cnZleS5rb1Rlc3RzIl0sIm1hcHBpbmdzIjoiQUFBQSxBQUlBLDhDQUo4QztBQUM5QyxrREFBa0Q7QUFDbEQsNkRBQTZEO0FBQzdELDJEQUEyRDtBQUMzRCxJQUFPLFFBQVEsQ0FtQ2Q7QUFuQ0QsV0FBTyxRQUFRO0lBQUNBLElBQUFBLE9BQU9BLENBbUN0QkE7SUFuQ2VBLFdBQUFBLE9BQU9BLEVBQUNBLENBQUNBO1FBQ3JCQyxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUV4QkEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxVQUFVQSxNQUFNQTtZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDQSxDQUFDQTtRQUNIQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxvQ0FBb0NBLEVBQUVBLFVBQVVBLE1BQU1BO1lBQzdELElBQUksUUFBUSxHQUFHLElBQUksaUJBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUNBLENBQUNBO1FBQ0hBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLHFDQUFxQ0EsRUFBRUEsVUFBVUEsTUFBTUE7WUFDOUQsSUFBSSxRQUFRLEdBQUcsSUFBSSwyQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztZQUMzRSxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUM5RixDQUFDLENBQUNBLENBQUNBO1FBQ0hBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLGlEQUFpREEsRUFBRUEsVUFBVUEsTUFBTUE7WUFDMUUsSUFBSSxRQUFRLEdBQUcsSUFBSSx5QkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQixRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO1lBQ3hGLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BGLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFDSEEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsdUNBQXVDQSxFQUFFQSxVQUFVQSxNQUFNQTtZQUNoRSxJQUFJLFFBQVEsR0FBRyxJQUFJLHlCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1lBQzNFLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsMENBQTBDLENBQUMsQ0FBQztZQUMxRixRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSwwQ0FBMEMsQ0FBQyxDQUFDO1FBQy9GLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFHUEEsQ0FBQ0EsRUFuQ2VELE9BQU9BLEdBQVBBLGdCQUFPQSxLQUFQQSxnQkFBT0EsUUFtQ3RCQTtBQUFEQSxDQUFDQSxFQW5DTSxRQUFRLEtBQVIsUUFBUSxRQW1DZCIsImZpbGUiOiJ0ZXN0c19rby5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9zb3VyY2VzL2Jhc2UudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc291cmNlcy9xdWVzdGlvbi50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9zb3VyY2VzL3F1ZXN0aW9uX2Jhc2VzZWxlY3QudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vc291cmNlcy9xdWVzdGlvbl9jaGVja2JveC50c1wiIC8+XHJcbm1vZHVsZSBkeFN1cnZleS5rb1Rlc3RzIHtcclxuICAgIFFVbml0Lm1vZHVsZShcImtvVGVzdHNcIik7XHJcblxyXG4gICAgUVVuaXQudGVzdChcIlN1cGVyIHN0YWJsZSB0ZXN0XCIsIGZ1bmN0aW9uIChhc3NlcnQpIHtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoMSArIDEsIDIsIFwiVGhpcyBzaG91bGQgdXN1YWxseSBwYXNzXCIpO1xyXG4gICAgfSk7XHJcbiAgICBRVW5pdC50ZXN0KFwiU2V0IHZhbHVlIHRocm91Z2ggb2JzZXJ2YWJsZSB2YWx1ZVwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICAgICAgdmFyIHF1ZXN0aW9uID0gbmV3IFF1ZXN0aW9uKFwicVwiKTtcclxuICAgICAgICBxdWVzdGlvbi5rb1ZhbHVlKFwidGVzdFwiKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwocXVlc3Rpb24udmFsdWUsIFwidGVzdFwiLCBcInZhbHVlIGlzIHNldCBjb3JyZWN0bHkuXCIpO1xyXG4gICAgfSk7XHJcbiAgICBRVW5pdC50ZXN0KFwia29PdGhlclZpc2libGUgZm9yIG9uZSBjaG9pY2UgaXRlbXNcIiwgZnVuY3Rpb24gKGFzc2VydCkge1xyXG4gICAgICAgIHZhciBxdWVzdGlvbiA9IG5ldyBRdWVzdGlvblNlbGVjdEJhc2UoXCJxXCIpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChxdWVzdGlvbi5rb090aGVyVmlzaWJsZSgpLCBmYWxzZSwgXCJJbml0aWFsbHkgaXMgbm90IHZpc2libGVcIik7XHJcbiAgICAgICAgcXVlc3Rpb24ua29WYWx1ZShxdWVzdGlvbi5vdGhlclN0cmluZyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHF1ZXN0aW9uLmtvT3RoZXJWaXNpYmxlKCksIHRydWUsIFwiT3RoZXIgdmlzaWJsZSBpcyB0cnVlIGFmdGVyIHNlbGVjdGluZyBpdFwiKTtcclxuICAgIH0pO1xyXG4gICAgUVVuaXQudGVzdChcIkNyZWF0ZSBrb1ZhbHVlIGFzIG9ic2VydmFibGUgYXJyYXkgZm9yIGNoZWNrYm94XCIsIGZ1bmN0aW9uIChhc3NlcnQpIHtcclxuICAgICAgICB2YXIgcXVlc3Rpb24gPSBuZXcgUXVlc3Rpb25DaGVja2JveChcInFcIik7XHJcbiAgICAgICAgcXVlc3Rpb24ua29WYWx1ZS5wdXNoKFwidGVzdDFcIik7XHJcbiAgICAgICAgcXVlc3Rpb24ua29WYWx1ZS5wdXNoKFwidGVzdDJcIik7XHJcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChxdWVzdGlvbi5rb1ZhbHVlKCksIFtcInRlc3QxXCIsIFwidGVzdDJcIl0sIFwia29WYWx1ZSBpcyBvYnNlcnZhYmxlIGFycmF5XCIpO1xyXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwocXVlc3Rpb24udmFsdWUsIFtcInRlc3QxXCIsIFwidGVzdDJcIl0sIFwidmFsdWUgaXMgc2V0IGNvcnJlY3RseS5cIik7XHJcbiAgICB9KTtcclxuICAgIFFVbml0LnRlc3QoXCJrb090aGVyVmlzaWJsZSBmb3IgbXVsdGkgY2hvaWNlIGl0ZW1zXCIsIGZ1bmN0aW9uIChhc3NlcnQpIHtcclxuICAgICAgICB2YXIgcXVlc3Rpb24gPSBuZXcgUXVlc3Rpb25DaGVja2JveChcInFcIik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHF1ZXN0aW9uLmtvT3RoZXJWaXNpYmxlKCksIGZhbHNlLCBcIkluaXRpYWxseSBpcyBub3QgdmlzaWJsZVwiKTtcclxuICAgICAgICBxdWVzdGlvbi5rb1ZhbHVlLnB1c2goXCJ0ZXN0MVwiKTtcclxuICAgICAgICBxdWVzdGlvbi5rb1ZhbHVlLnB1c2gocXVlc3Rpb24ub3RoZXJTdHJpbmcpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChxdWVzdGlvbi5rb090aGVyVmlzaWJsZSgpLCB0cnVlLCBcIk90aGVyIHZpc2libGUgaXMgdHJ1ZSBhZnRlciBzZWxlY3RpbmcgaXRcIik7XHJcbiAgICAgICAgcXVlc3Rpb24ua29WYWx1ZS5wb3AoKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwocXVlc3Rpb24ua29PdGhlclZpc2libGUoKSwgZmFsc2UsIFwiT3RoZXIgdmlzaWJsZSBpcyB0cnVlIGFmdGVyIHNlbGVjdGluZyBpdFwiKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbn0iXSwic291cmNlUm9vdCI6InNvdXJjZXMifQ==